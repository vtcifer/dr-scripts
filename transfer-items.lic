=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#transfer-items
=end

custom_require.call %w[common common-items]

class ItemTransfer
  include DRC
  include DRCI

  def initialize
    arg_definitions = [
      [
        { name: 'source', regex: /^[A-z\.\s\-']+$/i, variable: true, description: 'Source container' },
        { name: 'destination', regex: /^[A-z\.\s\-']+$/i, variable: true, description: 'Destination container' },
        { name: 'noun', regex: /^[A-z\.\s\-]+$/i, optional: true, variable: true, description: 'If specified, only items with this noun will be transferred.'}
      ]
    ]
    args = parse_args(arg_definitions)
    transfer_items(args.source, args.destination, args.noun)
  end

  def transfer_items(source, destination, noun)
    # If container is very full then LOOK may not list all of them.
    # If you're moving a specific item, then sort those to the top
    # to increase chances we find and move all of them in one go.
    bput("sort #{noun} in my #{source}", "are now at the top", "What were you referring to", "Please rephrase that command", "You may only sort items in your inventory") if noun
    DRCI.get_item_list(source, 'look')
      .map { |full_name| full_name =~ /lot of other stuff/ ? full_name : full_name.split(' ').last }
      .select { |item| noun ? /\b#{noun}\b/ =~ item : true }
      .each do |item|
        # This indicates there is more items than LOOK can show
        # and we've reached the end of what we last saw.
        # We need to look again to see what we can now see.
        # Keep doing this until fill the destination or exhaust source.
        if item =~ /lot of other stuff/
          transfer_items(source, destination, noun)
          return
        end
        # Attempt to get the item from the source container.
        if DRCI.get_item(item, source)
          if destination == 'trash'
            trash_item(item)
          else
            move_item(item, source, destination)
          end
        else
          DRC.message("Unable to get #{item} from #{source}.")
          DRC.message("Your hands are full!") if (DRC.left_hand && DRC.right_hand)
          exit
        end
      end
  end

  def move_item(item, source, destination)
    # Attempt to put the item in the destination container.
    unless DRCI.put_away_item?(item, destination)
      DRC.message("Unable to put #{item} in your #{destination}. The container may be full or too small to hold the item.")
      # Return item to source container.
      # Loop will try to transfer the next item in the list.
      DRCI.put_away_item?(item, source)
    end
  end

  def trash_item(item)
    DRCI.dispose_trash(item)
  end

end

ItemTransfer.new
