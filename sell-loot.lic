=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sell-loot
=end

custom_require.call(%w[common common-items common-money common-travel drinfomon equipmanager])

class SellLoot
  include DRC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'town', regex: /^([a-zA-Z\s']+)$/i, variable: true, description: 'Override the town to sell loot in.' }
      ],
      [
        { name: 'amount', regex: /\d+/i, variable: true, description: 'Number of coins to keep' },
        { name: 'type', regex: /\w+/i, variable: true, description: 'Type of coins to keep' }
      ],
      [
        { name: 'town', regex: /^([a-zA-Z\s']+)$/i, variable: true, description: 'Override the town to sell loot in.' },
        { name: 'amount', regex: /\d+/i, variable: true, description: 'Number of coins to keep' },
        { name: 'type', regex: /\w+/i, variable: true, description: 'Type of coins to keep' }
      ],
      []
    ]
    args = parse_args(arg_definitions)

    EquipmentManager.new.empty_hands

    Flags.add('tip-accepted', '.* accepts your tip and slips it away with a smile')
    Flags.add('tip-declined', '.* declines your tip offer')
    Flags.add('tip-expired', 'Your tip offer to .* has expired')

    @settings = get_settings
    town_data = get_data('town')
    @character_hometown = DRC.get_town_name(args.town || @settings.sell_loot_town || @settings.hometown)
    @hometown = town_data[@character_hometown]
    @bankbot_name = @settings.bankbot_name
    @bankbot_room_id = @settings.bankbot_room_id
    @bankbot_deposit_threshold = @settings.bankbot_deposit_threshold
    @bankbot_enabled = @settings.bankbot_enabled
    @local_currency = town_data[@character_hometown]['currency']
    skip_bank = @settings.sell_loot_skip_bank
    skip_exchange = @settings.sell_loot_skip_exchange
    keep_money_by_currency = @settings.sell_loot_money_on_hand.split(' ')
    keep_amount = args.amount || keep_money_by_currency[0] || 3
    keep_denomination = args.type || keep_money_by_currency[1] || 'silver'
    keep_coppers_bank = convert_to_copper(keep_amount, keep_denomination)
    @sort_auto_head = @settings.sort_auto_head

    sell_gems("#{@settings.gem_pouch_adjective} #{@settings.gem_pouch_noun}") if @settings.sell_loot_pouch
    check_spare_pouch(@settings.spare_gem_pouch_container, @settings.gem_pouch_adjective) if @settings.spare_gem_pouch_container

    sell_metals_and_stones(@settings.sell_loot_metals_and_stones_container) if @settings.sell_loot_metals_and_stones

    sell_bundle if @settings.sell_loot_bundle

    sell_traps(@settings.pick['component_container'] || @settings.component_container) if @settings.sell_loot_traps

    return if skip_bank && !@bankbot_enabled
    return if @bankbot_enabled && (@bankbot_name.nil? || @bankbot_room_id.nil?)

    if skip_bank && @bankbot_enabled
      $CURRENCIES.each do |currency|
        give_money_to_bankbot(currency, currency =~ /#{@local_currency}/i ? @bankbot_deposit_threshold : 0)
      end
      return
    end

    exchange_coins unless skip_exchange
    if @bankbot_enabled
      give_money_to_bankbot(@local_currency, @bankbot_deposit_threshold)
    else
      deposit_coins(keep_coppers_bank)
    end
  end

  def exchange_coins
    DRCT.walk_to(@hometown['exchange']['id'])
    DRC.release_invisibility
    exchange_to = @hometown['currency']
    $CURRENCIES
      .reject { |currency| currency =~ /#{exchange_to}/i }
      .each { |currency| fput("exchange all #{currency} for #{exchange_to}") }
  end

  def deposit_coins(keep_copper)
    DRCT.walk_to(@hometown['deposit']['id'])
    DRC.release_invisibility
    DRC.bput('wealth', 'Wealth:')
    case DRC.bput('deposit all', 'you drop all your', 'drop your coins inside', 'You hand the clerk some coins', "You don't have any", 'There is no teller here', 'reached the maximum balance I can permit', "We don't serve necromancers or sorcerers here.")
    when 'There is no teller here', "We don't serve necromancers or sorcerers here."
      return
    end
    minimize_coins(keep_copper).each { |amount| DRCM.withdraw_exact_amount?(amount, @settings, @character_hometown) }
    DRC.bput('check balance', 'your current balance is', 'As expected, there are')
  end

  def give_money_to_bankbot(currency, keep)
    copper_on_hand = DRCM.check_wealth(currency)
    deposit_amount = copper_on_hand - keep
    return if deposit_amount <= 0

    DRCT.walk_to(@bankbot_room_id)
    return unless DRRoom.pcs.include?(@bankbot_name)

    Flags.reset('tip-accepted')
    Flags.reset('tip-expired')
    Flags.reset('tip-declined')
    case DRC.bput("tip #{@bankbot_name} #{deposit_amount} #{currency}", 'You offer', "I don't know who", 'you really should keep every bronze you can get your hands on', 'You already have a tip offer outstanding', 'already has a tip offer pending', "But you don't have that much!")
    when "I don't know who"
      echo '***Bankbot not found, skipping deposit***'
      return
    when 'You already have a tip offer outstanding'
      echo '***You already have a tip offer outstanding, skipping deposit***'
      return
    when 'you really should keep every bronze you can get your hands on'
      echo '***ERROR*** UNABLE TO TIP DUE TO LOW CIRCLE, EXITING'
      return
    when 'already has a tip offer pending'
      echo '***Bankbot is busy, skipping deposit***'
      return
    when "But you don't have that much!"
      echo '***Error calculating tip amount, please post a log on GitHub***'
      return
    end

    pause 0.5 until Flags['tip-accepted'] || Flags['tip-expired'] || Flags['tip-declined']
  end

  def sell_bundle
    return unless DRCI.exists?('bundle')

    return unless DRCT.walk_to(@hometown['tannery']['id'])

    return if DRC.bput('remove my bundle', 'You remove', 'You sling', 'Remove what','You take') == 'Remove what'
    DRC.release_invisibility
    DRC.bput('sell my bundle', 'ponders over the bundle', 'sorts through it', 'gives it a close inspection', 'takes the bundle')
    DRC.bput('stow rope', 'You put')
  end

  def check_spare_pouch(container, adj)
    fput("open my #{container}")
    return if inside?("#{adj} pouch", container)
    DRCT.walk_to(@hometown['gemshop']['id'])
    clerk = which_clerk(@hometown['gemshop']['name'])
    DRC.release_invisibility
    fput("ask #{clerk} for #{adj} pouch")
    fput("put my pouch in my #{container}")
  end

  def which_clerk(clerks)
    clerks.is_a?(String) ? clerks : clerks.find { |clerk| DRRoom.npcs.include?(clerk) }
  end

  def sell_gems(container)
    DRC.release_invisibility
    case DRC.bput("open my #{container}", 'You open your', 'You open a', 'has been tied off', 'What were you referring to', 'That is already open')
    when 'has been tied off', 'What were you referring to'
      return
    end

    gems = get_gems(container)
    unless gems.empty?
      return unless DRCT.walk_to(@hometown['gemshop']['id'])
      clerk = which_clerk(@hometown['gemshop']['name'])

      gems.each do |gem|
        fput("get my #{gem} from my #{container}")
        fput("sell my #{gem} to #{clerk}")
      end
    end

    fput("close my #{container}") unless @settings.sell_loot_skip_pouch_close
  end

  def sell_metals_and_stones(container)
    DRC.release_invisibility

    item_data = get_data('items')
    metal_types = item_data['metal_types']
    stone_types = item_data['stone_types']

    material_types = metal_types + stone_types
    ignore_types = @settings.sell_loot_ignored_metals_and_stones

    materials_regex = /^(?<size>\w+) (?<material>#{(material_types).join('|')}) (?<noun>nugget|bar)$/i
    ignored_regex = /\b#{ignore_types.join('|')}\b/i unless ignore_types.empty?

    items = DRCI.get_item_list(container)
      .select { |item| item =~ materials_regex }
      .reject { |item| ignored_regex ? item =~ ignored_regex : false }
      .map do |item|
        # Do regex then grab matches for details.
        item =~ materials_regex
        material = Regexp.last_match[:material]
        noun = Regexp.last_match[:noun]
        "#{material} #{noun}"
      end

    unless items.empty?
      return unless DRCT.walk_to(@hometown['gemshop']['id'])
      clerk = which_clerk(@hometown['gemshop']['name'])

      items.each do |item|
        fput("get my #{item} from my #{container}")
        fput("sell my #{item} to #{clerk}")
      end
    end
  end

  # Thief only.
  # Sells traps harvested from disarmed boxes to the locksmith.
  # Not going to try to sell to a pawnshop because too great of risk of
  # selling something valuable that found its way into this container.
  # Bulk selling a component pouch is safest option because it works like
  # bulk selling a bundle of skins or a trader bulk selling a gem pouch.
  def sell_traps(container)
    return unless DRStats.thief?
    return unless DRC.bput("look in my #{container}", "There is nothing in there", "you see") == "you see"

    DRC.release_invisibility
    case DRC.bput("remove my #{container}", "You remove", "What were you referring to", "You aren't wearing that", "Remove what")
    when "What were you referring to", "You aren't wearing that", "Remove what"
      return
    end

    if DRCT.walk_to(@hometown['locksmithing']['id'])
      clerk = which_clerk(@hometown['locksmithing']['name'])
      # The locksmith won't accept your component container
      # as long as other players are in the same room.
      # Once the room is empty then try to give it to them.
      wait_counter = 0
      while !DRRoom.pcs.empty? do
        break if wait_counter >= 5
        wait_counter = wait_counter + 1
        echo "Waiting for other players to leave the room..."
        pause 5
      end
      case DRC.bput("give my #{container} to #{clerk}",
        "hands it back to you along with some coins",     # success!
        "There's nothing in there",                       # empty container
        "What is it you're trying to give",               # no container or no npc
        "not interested in",                              # non-traps in container
        "doesn't appear to be interested in your offer",  # not a thief
        "I don't have that in stock right now"            # players in room, try again later
      )
      when "not interested in"
        DRC.message("Remove non-trap components from #{container} then try again.")
      when "doesn't appear to be interested in your offer"
        DRC.message("Only thieves can sell trap components in bulk to locksmiths. Try selling them individually at the pawnshop.")
      when "I don't have that in stock right now"
        DRC.message("Unable to sell #{container} at this time. Try again later when no one else is in the shop with you.")
      end
    end

    DRC.bput("wear my #{container}", "You attach", "Wear what", "You are already wearing")
    fput("sort auto head") if @sort_auto_head
  end

end

before_dying do
  Flags.delete('tip-accepted')
  Flags.delete('tip-declined')
  Flags.delete('tip-expired')
end

SellLoot.new
