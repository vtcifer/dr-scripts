=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#remedy
=end

# ;remedy remedies 2 "blister cream" "red flower" nemoih bar mortar cream
# ;remedy remedies 2 "blister cream" nemoih "not used" bar mortar cream  - for when only herb is required

custom_require.call(%w[common common-arcana common-crafting common-items common-travel common-money events])

class Remedy
  include DRC
  include DRCC
  include DRCI
  include DRCA
  include DRCT
  include DRCM

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.alchemy_belt
    @training_spells = @settings.crafting_training_spells
    @stock = get_data('crafting')['remedies'][@settings.hometown]

    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w[remedies], description: 'What alchemy type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'herb1', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words..' },
        { name: 'herb2', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words. Put none for none.' },
        { name: 'catalyst', regex: /\w+/i, variable: true, description: 'Type of catalyst.' },
        { name: 'container', regex: /\w+/i, variable: true, description: 'Type of container for creating.' },
        { name: 'noun', regex: /\w+/i, variable: true, options: %w[cream salve wash balm ungent potion tonic ointment elixir poultices draught], description: 'End product' }
      ],
      [
        { name: 'continue', regex: /continue/i, variable: true },
        { name: 'herb2', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words. Put none for none.' },
        { name: 'catalyst', regex: /\w+/i, variable: true, description: 'Type of catalyst.' },
        { name: 'container', regex: /\w+/i, variable: true, description: 'Type of container for creating.' },
        { name: 'noun', regex: /\w+/i, variable: true, options: %w[cream salve wash balm ungent potion tonic ointment elixir poultices draught], description: 'End product' }
      ]
    ]

    args = parse_args(arg_definitions)

    Flags.add('remedy-water', 'You need another splash of water')
    Flags.add('remedy-alcohol', 'You need another splash of alcohol')
    Flags.add('remedy-catalyst', 'You need another catalyst material')
    Flags.add('remedy-herb', 'You need another prepared herb')
    Flags.add('remedy-turn', 'Clumps of material stick to the sides', 'Once finished you notice clumps of material')
    Flags.add('remedy-smell', 'begins to transition colors', 'you should smell the mixture', 'smell the mixture')
    Flags.add('remedy-sieve', 'Upon completion you see some particulate clouding up the mixture.', 'with a sieve')

    @book_type = args.book_type
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @herb1 = args.herb1
    @herb2 = args.herb2
    @catalyst = args.catalyst
    @container = args.container
    if @container =~ /bowl/
      # Check for cauldron in place of bowl
      @container = @settings.alchemy_tools.find { |tool| /cauldron|bowl/ =~ tool }
    else
      @container = @settings.alchemy_tools.find { |tool| /#{args.container}/ =~ tool } || args.container
    end
    @pestle = @settings.alchemy_tools.find { |tool| /pestle/ =~ tool } || 'pestle'
    @verb = 'crush'
    @noun = args.noun
    @count = 0
    @herb_container = @settings.herb_container # normal container or special herb container both work

    # determine water and alcohol container and check if water or alcohol is in container
    @water = 'water'     # added for special containers that generate water/alcohol
    @waterVerb = 'put'   # changed to pour when using a container
    if @settings.water_container
      get_item(@settings.water_container)
      if bput("count water in my #{@settings.water_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
        @water = @settings.water_container
        @waterVerb = 'pour'
      else # else (not elsif) needed to rub special container for water before checking again, uses defaults if container doesn't have water
        fput("rub my #{@settings.water_container}")
        fput("get water from #{@bag}") # added this part just in case water is in another bag, get water doesn't work, and container cannot create water
        fput("put water in my #{@settings.water_container}")
        if bput("count water in my #{@settings.water_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
          @water = @settings.water_container
          @waterVerb = 'pour'
        end
      end
      stow_item(@water)
    end
    @alcohol = 'alcohol' # same as water
    @alcoholVerb = 'put' # same as water
    if @settings.alcohol_container
      get_item(@settings.alcohol_container)
      if bput("count alcohol in my #{@settings.alcohol_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
        @alcohol = @settings.alcohol_container
        @alcoholVerb = 'pour'
      else # else (not elsif) needed to rub special container for alcohol before checking again, uses defaults if container doesn't have alcohol
        fput("rub my #{@settings.alcohol_container}")
        fput("get alcohol from #{@bag}") # added this part just in case alcohol is in another bag, get alcohol doesn't work, and container cannot create alcohol
        fput("put alcohol in my #{@settings.alcohol_container}")
        if bput("count alcohol in my #{@settings.alcohol_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
          @alcohol = @settings.alcohol_container
          @alcoholVerb = 'pour'
        end
      end
      stow_item(@alcohol)
    end

    # buy ingredients if missing
    if @water == 'water' && bput("tap my #{@water}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('water')
    end
    if @alcohol == 'alcohol' && bput("tap my #{@alcohol}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('alcohol')
    end
    if ['coal nugget', 'nugget'].include?(@catalyst) && bput("tap my #{@catalyst}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('coal')
    end
    wait_for_script_to_complete('buff', ['remedy'])

    # used for internal remedies (this section is needed for CONTINUE arg to work)
    if /mort/ !~ @container
      @pestle = 'mixing stick'
      @verb = 'mix'
    end

    get_item(@pestle) if args.continue
    work("analyze my #{@noun}") if args.continue

    create_item
  end

  def get_item(name)
    # added to check for herbs in special herb container, then check if herbs in crafting container, otherwise get normally
    # this is to prevent issues getting herbs if someone has less than 25 in @herb_container
    # there are still issues when herbs are in a different container (not @bag or @herb_container), script will still run fine

    if (name == @herb1 || name == @herb2) && @settings.herb_container && bput("tap #{name} in #{@herb_container}", 'You tap', 'I could not find what you were referring to.', 'You lightly tap') == 'You tap'
      get_crafting_item(name, @herb_container, true, @belt) # bag_items is TRUE to look for herbs in herb_container
    elsif (name == @herb1 || name == @herb2) && bput("tap #{name} in #{@bag}", 'You tap', 'I could not find what you were referring to.', 'You lightly tap') == 'You tap'
      get_crafting_item(name, @bag, true, @belt) # bag_items is TRUE to look for herbs in bag
    else
      get_crafting_item(name, @bag, @bag_items, @belt) # bag_items is FALSE to GET HERB without specifying a bag
      'none' # return specified to handle herbs differently for this option (to prevent a bug)
    end
  end

  def stow_item(name)
    if (name == @herb1 || name == @herb2) && @settings.herb_container
      stow_crafting_item(name, @herb_container, @belt) # try to put herbs in herb container first
    else
      stow_crafting_item(name, @bag, @belt)
    end
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      stow_item('book')
      magic_cleanup
      exit
    end
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def create_item
    @count = 0
    crafting_magic_routine(@settings)
    stow_item(left_hand)
    stow_item(right_hand)
    pause 0.2 # to prevent issues with lag during the stow commands
    bput('get remed book', 'What were', 'You get')
    echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Alchemy') == 175
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')

    if ('red flower').include?(@herb1)
      @herb1 = 'dried flower' unless exists?('red flower')
    elsif ('blue flower').include?(@herb1)
      @herb1 = 'crushed flower' unless exists?('blue flower')
    end
    get_item(@container)

    bput('swap', 'You move', 'You have nothing') unless right_hand =~ /#{@container}/i #lower ground only works if the container is in the right hand.
    bput("lower ground", 'You lower') # lower to count and combine herbs. Switched to just lower ground so it works with all containers.

    # count herb, less than 25 get more herbs, otherwise stow and continue
    # added to handle herb containers, and modified to combine up to 25
    while @count < 25
      case get_item(@herb1) # returns 'none' to handle getting herbs differently, see comment under when 'none'
      when 'none'
        # this part is to avoid the message "You are already holding that."
        # in cases where it won't get more herbs, it takes a longer route to get herbs from other bags (not @bag nor @herb_container)
        @count = Integer(bput("count my #{@herb1}", '\d+'))
        while @count < 25
          bput("put my #{@herb1} in my #{@container}", 'You put', 'already has something in it.', 'you count off and place only that many inside')
          fput("stow my #{@herb1}") #in case there are extra
          bput("get my #{@container}", 'You pick up', 'You get')
          # stow then get, to prevent getting herbs from container (i.e. mortar)
          stow_item(@container)
          bput("get my #{@herb1}", 'You get', 'What were you referring to?', 'You are already holding that.') # using bput instead of get_item to keep script running when it cannot get the herb
          get_item(@container)
          bput('swap', 'You move', 'You have nothing') unless right_hand =~ /#{@container}/i #lower ground only works if the container is in the right hand.
          bput("lower ground", 'You lower') # lower to count and combine herbs. Switched to just lower ground so it works with all containers.
          bput("get #{@herb1} from #{@container}", 'You get', 'What were you referring to?')
          if bput("combine my #{@herb1}", 'You combine', 'too large to add', 'You must be holding both') == 'You must be holding both'
            @count = 25 # 25 used to break loops
          else
            @count += Integer(bput("count my #{@herb1}", '\d+')) #increment to run again
          end
        end
      else
        @count += Integer(bput("count my #{@herb1}", '\d+'))
        if bput("combine my #{@herb1}", 'You combine', 'too large to add', 'You must be holding both') == 'too large to add'
          f_stack = bput("count my first #{@herb1}", 'You count out \d+ pieces').scan(/\d+/).first.to_i
          s_stack = bput("count my second #{@herb1}", 'I could not find', 'You count out \d+ pieces').scan(/\d+/).first.to_i
            if f_stack == 75
              bput("stow my second #{@herb1}", "You put")
            elsif s_stack == 75
              bput("stow my first #{@herb1}", "You put")
            end
          #stow_item(@herb1)
        end
      end
    end

    case bput("put #{@herb1} in my #{@container}", 'You put', 'already has something', 'can only hold', 'You realize the', 'You vigorously rub')
    when 'You put', 'can only hold', 'You vigorously rub'
      stow_item(@herb1) # Added for when the herb is larger than 25 pieces
    when 'already has something', 'You realize the'
      bput("tilt my #{@container}", 'You grab')
      bput("tilt my #{@container}", 'You grab', 'Roundtime')
      bput("put #{@herb1} in my #{@container}", 'You put', 'can only hold')
      stow_item(@herb1) # Added for when the herb is larger than 25 pieces
    end

    get_item(@container) # pickup off ground
    get_item(@pestle)

    if /mort/ =~ @container
      work("#{@verb} my #{@herb1} with my #{@pestle}")
    else
      work("#{@verb} my #{@container} with my #{@pestle}")
    end
  end

  def work(command)
    waitrt?
    crafting_magic_routine(@settings)
    if Flags['remedy-water']
      add_water
    elsif Flags['remedy-alcohol']
      add_alcohol
    elsif Flags['remedy-catalyst']
      add_catalyst
    elsif Flags['remedy-herb']
      add_herb
    elsif Flags['remedy-sieve']
      sieve
    elsif Flags['remedy-turn']
      turn
    elsif Flags['remedy-smell']
      smell
    else
      case bput(command,
                'Applying the final touches',
                'Interesting thought really... but no.',
                'you just can\'t mix',
                'Try as you might',
                'Roundtime:')
      when 'Applying the final touches', 'Interesting thought really... but no.', 'you just can\'t mix', 'Try as you might'
        finish
      when 'Roundtime:'
        waitrt?
        command = if /mort/ =~ @container
                    "#{@verb} my #{@noun} with my #{@pestle}"
                  else
                    "#{@verb} my #{@container} with my #{@pestle}"
                  end
      end
    end
    waitrt?
    crafting_magic_routine(@settings)
    work(command)
  end

  def add_water
    waitrt?
    stow_item(left_hand)
    get_item(@water)
    Flags.reset('remedy-water')
    if bput("#{@waterVerb} #{@water} in my #{@container}", 'Roundtime', 'You toss', 'You cannot find a way to add that as an ingredient') == 'You cannot find a way to add that as an ingredient'
      stow_item(left_hand)
      if bput("get water from #{@water}", 'You get', 'What were you referring to') == 'What were you referring to'
        get_item('water')
      end
      bput("put water in my #{@container}", 'Roundtime', 'You toss', 'You cannot find a way to add that as an ingredient')
      waitrt?
      fput("put water in my #{@water}")
    end
    waitrt?
    stow_item(left_hand)
    get_item(@pestle)
  end

  def add_alcohol
    waitrt?
    stow_item(left_hand)
    get_item(@alcohol)
    Flags.reset('remedy-alcohol')
    if bput("#{@alcoholVerb} #{@alcohol} in my #{@container}", 'Roundtime', 'You toss', 'You cannot find a way to add that as an ingredient') == 'You cannot find a way to add that as an ingredient'
      stow_item(left_hand)
      if bput("get alcohol from #{@alcohol}", 'You get', 'What were you referring to') == 'What were you referring to'
        get_item('alcohol')
      end
      bput("put alcohol in my #{@container}", 'Roundtime', 'You toss', 'You cannot find a way to add that as an ingredient')
      waitrt?
      fput("put alcohol in my #{@alcohol}")
    end
    waitrt?
    stow_item(left_hand)
    get_item(@pestle)
  end

  def add_catalyst
    waitrt?
    stow_item(left_hand)
    get_item(@catalyst)
    Flags.reset('remedy-catalyst')
    bput("put my #{@catalyst} in my #{@container}", 'Roundtime', 'You vigorously')
    waitrt?
    stow_item(left_hand)
    get_item(@pestle)
  end

  def add_herb
    waitrt?
    stow_item(left_hand)
    get_item(@herb2)
    Flags.reset('remedy-herb')
    bput("put my #{@herb2} in my #{@container}", 'Roundtime', 'You vigorously')
    waitrt?
    stow_item(left_hand)
    get_item(@pestle)
  end

  def sieve
    waitrt?
    stow_item(left_hand)
    get_item('sieve')
    Flags.reset('remedy-sieve')
    bput("push my #{@noun} with my sieve", 'Roundtime')
    waitrt?
    stow_item(left_hand)
    get_item(@pestle)
  end

  def turn
    waitrt?
    Flags.reset('remedy-turn')
    bput("turn my #{@container}", 'Roundtime')
    waitrt?
  end

  def smell
    waitrt?
    Flags.reset('remedy-smell')
    bput("smell my #{@noun}", 'Roundtime')
    waitrt?
  end

  def buy_item(name)
    get_money_from_bank('5 silver', @settings)

    case name
    when 'coal'
      DRCT.order_item(@stock['catalyst-room'], @stock['catalyst_number'])
      stow_item('coal nugget')
    when 'water'
      DRCT.order_item(@stock['stock-room'], @stock['stock-number'])
      stow_item('water')
    when 'alcohol'
      DRCT.order_item(@stock['stock-room'], @stock['stock-number-a'])
      stow_item('alcohol')
    end

    walk_to(@settings.alchemy_room)
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
    bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def finish
    waitrt?
    stow_item(left_hand)
    fput("get my #{@noun} from my #{@container}")
    stow_item(right_hand)
    magic_cleanup
    exit
  end
end

before_dying do
  Flags.delete('remedy-water')
  Flags.delete('remedy-alcohol')
  Flags.delete('remedy-catalyst')
  Flags.delete('remedy-herb')
  Flags.delete('remedy-sieve')
  Flags.delete('remedy-turn')
  Flags.delete('remedy-smell')
end

Remedy.new
