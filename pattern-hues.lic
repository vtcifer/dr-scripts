=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#pattern_hues
=end

custom_require.call(%w(common))

class PatternHues
  include DRC

  def initialize
    arg_definitions = [
    [
      { name: 'timing', regex: /now/i, optional: true, description: 'Run now or continual.' },
      { name: 'debug', regex: /debug/i, optional: true, description: 'Debug output.' }
    ]
    ]

    args = parse_args(arg_definitions)
    @debug = args.debug
    @settings = get_settings
    @duration = @settings.pattern_hues['duration']
    @no_use_scripts = @settings.pattern_hues_no_use_scripts
    @no_use_rooms = @settings.pattern_hues_no_use_rooms

    @adj = @settings.pattern_hues['pattern_hues_styles']['pattern'] ||
      ['bright', 'crystalline', 'gleaming', 'glimmering', 'glistening',\
      'hazy', 'iridescent', 'lucent', 'opalescent', 'phosphorescent', 'relucent',\
      'scintillating', 'shadowy', 'shimmering', 'sparkling', 'translucent']

    @color = @settings.pattern_hues['pattern_hues_styles']['hue'] ||
      ['alabaster', 'white', 'amber', 'aqua', 'ash grey', 'azure',\
      'blizzard', 'blue-white', 'beige', 'blue', 'bone white', 'brackish brown',\
      'burgundy', 'charcoal black', 'chartreuse', 'chrome', 'cobalt blue',\
      'crimson', 'cyan', 'deep sable', 'dirt brown', 'emerald green',\
      'flame red', 'fog white', 'fuschia', 'gold-flecked', 'grey',\
      'indigo', 'jade', 'lavender', 'lurid green', 'lustrous golden',\
      'magenta', 'magma red', 'maroon', 'mauve', 'moss-green',\
      'obsidian black', 'ochre', 'olive', 'orange', 'peach', 'pink', 'puce',\
      'pumpkin orange', 'purple', 'red', 'ruby red', 'ruddy sanguine',\
      'russet', 'rust red', 'sea-green', 'seafoam green', 'seaweed green',\
      'silver', 'silver-flecked', 'sky blue', 'slate grey', 'snowflake white',\
      'soot black', 'steel grey', 'storm grey', 'sunfire gold', 'taupe', 'topaz yellow',\
      'turquoise', 'umber', 'violet', 'wheat gold', 'white', 'white-gold', 'yellow']

    cast_now if args.timing
    loop_cast
  end

  def cast_pattern_hues
    match_messages = [
      /You trace the complex sigils of the Pattern Hues cantrip around yourself./,
      /You already have/,
      /You gesture/,
      /Something in the area is interfering/,
      /You try, but the dolphin choose/,
      /You should stop practicing/,
      /You find it hard to concentrate on anything/
    ]
    scripts_to_unpause = DRC.smart_pause_all
    bput("prep cantrip pattern hues", "You are now prepared to cast the Pattern Hues cantrip.","You already have", "You should stop practicing")
    if @settings.pattern_hues['gesture'] == "random"
      bput("gesture #{@adj.sample} #{@color.sample}", *match_messages)
    else
      bput("gesture #{@settings.pattern_hues['gesture']}", *match_messages)
    end
    DRC.unpause_all_list(scripts_to_unpause)
  end

  def cast_now
    cast_pattern_hues
    exit
  end

  def loop_cast
    loop do
      cast_pattern_hues if should_activate_buff?
      DRC.message("Time.now #{Time.now}") if @debug
      DRC.message("duration = #{@duration}") if @debug
      pause @duration
    end
  end

  def should_activate_buff?
    !(hidden? || invisible? || running_no_use_scripts? || inside_no_use_room? )
  end

  def running_no_use_scripts?
    @no_use_scripts.any? { |name| Script.running?(name) }
  end

  def inside_no_use_room?
    @no_use_rooms.any? { |room| room === DRRoom.title.to_s()[2..-3] || room == Room.current.id }
  end

end
PatternHues.new