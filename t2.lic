=begin
        Alternative trainer script which kicks off sub-scripts based on
        current mindstates.  See Leustyin-setup and Chuno-setup for examples
        This script uses the `training_list` key to define the skills to train
        and thresholds in which the scrips should be started
=end

custom_require.call(%w[common drinfomon common-travel equipmanager])

class T2
  include DRC
  include DRCT

  def initialize
    @shutdown = false
    fput('awaken')

    @counter = 0
    @settings = get_settings
    @after_shutdown = @settings.t2_after_shutdown
    UserVars.t2_timers ||= {}

    t2_avoids = @settings.t2_avoids
    t2_avoids.each do |avoid|
      if avoid['state']
        fput("avoid !#{avoid['type']}")
      else
        fput("avoid #{avoid['type']}")
      end
    end
  end

  def run
    loop do
      break if @shutdown
      trainables = @settings['training_list']
      EquipmentManager.new.empty_hands

      trainables.each do |trainable|
        if trainable['skill'].is_a? Array
          next if trainable['skill'].each.reject { |skill| DRSkill.getxp(skill) >= trainable['start'] }.empty?
        elsif DRSkill.getxp(trainable['skill']) >= trainable['start']
          next
        elsif has_cooldown? trainable['skill']
          next unless cooldown_expired? trainable['skill']
        end

        # At this point we know that we need to train the skill
        if trainable['name'].nil?
          echo "***STATUS*** Starting (#{trainable['start']}) #{trainable['skill']}"
        else
          echo "***STATUS*** Starting (#{trainable['start']}) #{trainable['name']}"
        end
        execute_actions(trainable['scripts'])
        update_cooldown(trainable['skill']) if has_cooldown?(trainable['skill'])
        break
      end
    end
    if !@after_shutdown.empty?
      echo '***STATUS*** Controlled shutdown, executing shutdown actions.'
      execute_actions(@after_shutdown) 
    end
  end

  def has_cooldown?(skill)
    @settings.exp_timers.keys.include? skill
  end

  def cooldown_expired?(skill)
    UserVars.t2_timers[skill].nil? || Time.now - @settings.exp_timers[skill] >= UserVars.t2_timers[skill]
  end

  def update_cooldown(skill)
    UserVars.t2_timers[skill] = Time.now
  end

  def execute_actions(actions)
    echo 'Action'
    actions.each do |action|
      echo "***STATUS*** EXECUTE #{action}"
      action_parts = action.split(' ')
      script_name = action_parts.shift
      wait_for_script_to_complete(script_name, action_parts)
    end
  end

  def shutdown 
    if @shutdown
      DRC.message("T2 already set to shutdown.  Use '#{$clean_lich_char}e $T2.noshutdown' to cancel.")
    else
      @shutdown = true
      DRC.message("Shutting down T2 on next check.  Use '#{$clean_lich_char}e $T2.noshutdown' to cancel.")
    end
  end

  def noshutdown 
    if @shutdown
      @shutdown = false
      DRC.message('Canceling shutdown of T2.')
    else
      DRC.message("T2 not set to shutdown.  Use '#{$clean_lich_char}e $T2.shutdown' to shutdown.")
    end
  end

end

before_dying do
  scripts = ['magic', 'hunting-buddy', 'performance', 'athletics', 'first-aid', 'steal', 'outdoorsmanship', 'mech-lore', 'pick', 'foragetask']
  scripts.each do |script_name|
    stop_script(script_name) if Script.running?(script_name)
  end
  # Don't bother releasing cyclic for NMU guilds
  fput('release cyclic') unless %w[Commoner Barbarian Thief].include?(DRStats.guild)
end

$T2 = T2.new
$T2.run
$T2 = nil