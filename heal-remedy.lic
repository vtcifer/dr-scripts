# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#heal-remedy
=end

custom_require.call(%w[common common-healing common-items])

arg_definitions = [
  [
    { name: 'debug', regex: /debug/i, optional: true },
    { name: 'nohands', regex: /nohands/i, optional: true, description: 'Skip herbs which must be held to use' },
    { name: 'noscars', regex: /noscars/i, optional: true, description: 'Skip scar healing herbs' },
    { name: 'quick', regex: /quick/i, optional: true, description: 'Skip delay between wound and scar herbs' },
    { name: 'level', regex: /\d+/i, optional: true, description: 'Healing level desired.' },
    { name: 'override', regex: /override/i, optional: true, description: 'Override setting' }
  ]
]

args = parse_args(arg_definitions)
$debug_mode_hr = args.debug
$nohands_mode = args.nohands
$noscars_mode = args.noscars
$quick_mode = args.quick
@override_mode = args.override

$heal_level = if args.level
                args.level.to_i
              else
                0
              end

@settings = get_settings
DRC.message("@override_mode: #{@override_mode}") if $debug_mode_hr
if @settings.herbs && !@override_mode
  $remedies = get_data('herbs')
  DRC.message("herbs") if $debug_mode_hr
elsif @override_mode
  $remedies = get_data('remedies')
  DRC.message("first remedies condition") if $debug_mode_hr
end

@wounds_applied = FALSE
@remedy_container = @settings.remedy_container

def wounds
  wounds = DRCH.check_health['wounds']
  pause 1
  DRC.message("wounds check_health sees: #{wounds.to_yaml}") if $debug_mode_hr
  hurt = wounds.select { |level, _| level >= $heal_level }.values.flatten.map(&:body_part).map(&:downcase).uniq
  wound_grouping = { 'right arm' => 'limbs', 'left arm' => 'limbs', 'left leg' => 'limbs', 'right leg' => 'limbs', 'right hand' => 'limbs', 'left hand' => 'limbs', 'right eye' => 'eyes', 'left eye' => 'eyes' }
  scar_grouping = { 'right arm' => 'limbs', 'left arm' => 'limbs', 'left leg' => 'limbs', 'right leg' => 'limbs', 'right hand' => 'limbs', 'left hand' => 'limbs', 'head' => 'face', 'neck' => 'face', 'eyes' => 'face', 'chest' => 'body', 'abdomen' => 'body', 'back' => 'body' }
  hurt = hurt.map { |raw| wound_grouping[raw] || raw }.uniq
  scar = hurt.map { |raw| scar_grouping[raw] || raw }.uniq
  DRC.message("Wounds healing based on severity level set: #{hurt.to_yaml}") if $debug_mode_hr
  DRC.message("Scars healing based on severity level set: #{scar.to_yaml}") if $debug_mode_hr
  hurt.each do |key|
    DRC.message("In hurt loop.") if $debug_mode_hr
    DRC.message("Wounded area healing now: #{key}") if $debug_mode_hr
    remedy_apply_wounds(key) if !@settings.herbs || @override
    herb_apply_wounds(key) if @settings.herbs && !@override
  end
  return unless @wounds_applied
  pause 180 unless $quick_mode # pause 3 minutes before using scar remedies
  scar.each do |key|
    DRC.message("In scar loop.") if $debug_mode_hr
    DRC.message("Scar area healing now: #{key}") if $debug_mode_hr
    remedy_apply_scars(key) if !@settings.herbs || @override
    herb_apply_scars(key) if @settings.herbs && !@override
  end
end

def remedy_apply_wounds(body_part)
  DRC.message("In apply_wounds function for remedies and wounded area is #{body_part}") if $debug_mode_hr
  rem_wounds = $remedies['remedies']['external'][body_part]
  DRC.message("rem_wounds: #{rem_wounds}") if $debug_mode_hr
  rem_wounds.each do |remedy|
    if DRCI.get_item?(remedy, @remedy_container)
      case remedy
      when /salve/, /ungent/, /poultices/, /ointment/
        DRC.bput("rub my #{remedy}", 'You')
      when /potion/, /tonic/, /elixir/, /draught/
        drink_remedy?(remedy)
      end
      DRCI.put_away_item?(remedy, @remedy_container)
      @wounds_applied = TRUE
    else
      DRC.message("*** No more #{remedy}! ***")
    end
  end
end

def remedy_apply_scars(body_part)
  DRC.message("In apply_scar function for remedies and wounded area is #{body_part}") if $debug_mode_hr
  rem_scars = $remedies['remedies']['scars'][body_part]
  DRC.message("rem_scars: #{rem_scars}") if $debug_mode_hr
  rem_scars.each do |remedy|
    if DRCI.get_item?(remedy, @remedy_container)
      case remedy
      when /salve/, /ungent/, /poultices/, /ointment/
        DRC.bput("rub my #{remedy}", 'You')
      when /potion/, /tonic/, /elixir/, /draught/
        drink_remedy?(remedy)
      end
      DRCI.put_away_item?(remedy, @remedy_container)
      @wounds_applied = TRUE
    else
      DRC.message("*** No more #{remedy}! ***")
      DRC.message('Trying general scar remedies.')
      remedy_apply_general_scar('general')
    end
  end
end

def remedy_apply_general_scar(body_part)
  DRC.message("In apply_gerneral_scar function for remedies and wounded area is #{body_part}") if $debug_mode_hr
  rem_scars_general = $remedies['remedies']['scars'][body_part]
  DRC.message("rem_scars_general: #{rem_scars_general}") if $debug_mode_hr
  rem_scars_general.each do |remedy|
    if DRCI.get_item?(remedy, @remedy_container)
      case remedy
      when /salve/, /ungent/, /poultices/, /ointment/
        DRC.bput("rub my #{remedy}", 'You')
      when /potion/, /tonic/, /elixir/, /draught/
        drink_remedy?(remedy)
      end
      DRCI.put_away_item?(remedy, @remedy_container)
      @wounds_applied = TRUE
    else
      DRC.message("*** No more #{remedy}! ***")
    end
  end
end

def herb_apply_wounds(body_part)
  DRC.message("In apply_wounds function for herbs and wounded area is #{body_part}") if $debug_mode_hr
  rem_wounds = $remedies['remedies']['external'][body_part]
  DRC.message("rem_wounds: #{rem_wounds}") if $debug_mode_hr
  rem_wounds.each do |remedy|
    case remedy
    when /salve/, /sap/
      DRCI.get_item?(remedy, @remedy_container) unless $nohands_mode
      DRC.bput("rub my #{remedy}", 'You', 'Rub what?') unless $nohands_mode
      DRCI.put_away_item?(remedy, @remedy_container) unless $nohands_mode
      @wounds_applied = TRUE
    when /ungent/, /poultices/, /ointment/
      DRCI.get_item?(remedy, @remedy_container) unless $nohands_mode
      DRC.bput("rub my #{remedy}", 'You', 'Rub what?')
      DRCI.put_away_item?(remedy, @remedy_container) unless $nohands_mode
      @wounds_applied = TRUE
    when /potion/, /tonic/, /elixir/, /draught/
      drink_remedy?(remedy)
      @wounds_applied = TRUE
    when /flower/, /root/, /leaf/, /grass/
      eat_remedy?(remedy)
      @wounds_applied = TRUE
    end
  end
end

def herb_apply_scars(body_part)
  DRC.message("In apply_scar function for herbs and wounded area is #{body_part}") if $debug_mode_hr
  rem_scars = $remedies['remedies']['scars'][body_part]
  DRC.message("rem_scars: #{rem_scars}") if $debug_mode_hr
  rem_scars.each do |remedy|
    case remedy
    when /salve/, /ungent/, /poultices/, /ointment/, /sap/
      DRC.bput("rub my #{remedy}", 'You', 'Rub what?')
    when /tonic/, /draught/, /qun/
      drink_remedy?(remedy)
    when /genich/, /flower/, /root/, /leaf/, /grass/, /potion/, /nuloe/, /elixir/, /jadice/, /potion/, /pollen/
      eat_remedy?(remedy)
    end
  end
end

def drink_remedy?(remedy)
  DRC.message("In drink_remedy function and remedy is #{remedy}") if $debug_mode_hr
  result = DRC.bput("drink my #{remedy}", /You drink/, /Drink what?/, /can't drink/, /^You'd be better off trying to inhale/)
  DRC.message("drink_remedy function result is #{result}.") if $debug_mode_hr
  case result
  when /You drink/
    true
  when /^You'd be better off trying to inhale/
    inhale_remedy?(remedy)
  when /can't drink/
    eat_remedy?(remedy)
  else
    false
  end
end

def eat_remedy?(remedy)
  DRC.message("In eat_remedy function and remedy is #{remedy}") if $debug_mode_hr
  result = DRC.bput("eat my #{remedy}", /You eat/, /you referring to?/, /^You'd be better off trying to inhale/, /^You'd be better off trying to drink/, /you should try drinking that?/)
  DRC.message("eat_remedy function result is #{result}.") if $debug_mode_hr
  case result
  when /You eat/
    true
  when /^You'd be better off trying to inhale/
    inhale_remedy?(remedy)
  when /^You'd be better off trying to drink/, /you should try drinking that?/
    drink_remedy?(remedy)
  else
    false
  end
end

def inhale_remedy?(remedy)
  DRC.message("In inhale_remedy function and remedy is #{remedy}") if $debug_mode_hr
  #return false if $nohands_mode #working around this
  inhaled = false
  if DRC.left_hand && DRC.right_hand
    temp_left_item = DRC.left_hand
    temp_left_item = nil unless DRCI.lower_item?(DRC.left_hand)
  end
  if DRCI.get_item?(remedy, @remedy_container)
    inhaled = DRC.bput("inhale my #{remedy}", /You inhale/, /You might/) =~ /You inhale/
    DRCI.put_away_item?(remedy, @remedy_container)
  end
  DRCI.get_item?(temp_left_item) if temp_left_item
  inhaled
end

scripts_to_unpause = DRC.smart_pause_all
wounds
DRC.unpause_all_list(scripts_to_unpause)