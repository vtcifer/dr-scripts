=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#attunement
=end

custom_require.call(%w[common common-arcana common-travel drinfomon])

class Attunement
  include DRC
  include DRCA
  include DRCT

  LUNAR_PERCEIVE_COMMANDS = ['mana', 'moons', 'planets']

  PRIMARY_SIGILS_PATTERN = /\b(?:abolition|congruence|induction|permutation|rarefaction) sigil\b/
  SECONDARY_SIGILS_PATTERN = /\b(?:antipode|ascension|clarification|decay|evolution|integration|metamorphosis|nurture|paradox|unity) sigil\b/

  def initialize
    arg_definitions = [
      [
        { 
          name: 'health', 
          regex: /health/, 
          optional: true, 
          description: 'As an Empath, will do PERCEIVE HEALTH instead of PERCEIVE to train empathy.'
        },
        {
          name: 'sigil',
          regex: /sigil/,
          optional: true,
          description: 'Do sigil walking (scholarship training) instead of regular attunement walking'
        }
      ]
    ]
    args = parse_args(arg_definitions, true)
    settings = get_settings
    @stationary_skills_only = settings.crossing_training_stationary_skills_only
    @hometown = settings.hometown
    @attunement_rooms = settings.attunement_rooms
    @perceive_health_rooms = settings.perceive_health_rooms
    @sigil_walk_rooms = settings.sigil_walk_rooms
    @skill_to_train = if (DRStats.empath? && args.health) 
                        'Empathy' 
                      elsif args.sigil
                        'Scholarship'
                      else
                        'Attunement'
                      end
    @exp_max_threshold = settings.crossing_training_max_threshold
    @exp_target_increment = settings.attunement_target_increment
    @exp_start_mindstate = DRSkill.getxp(@skill_to_train)
    @exp_stop_mindstate = [@exp_start_mindstate + @exp_target_increment, @exp_max_threshold, 34].min
    @lunar_perceive_index = -1
    train_skill(settings)
  end

  def is_lunar_mage?
    DRStats.moon_mage? || DRStats.trader?
  end

  def is_health_walk?
    @skill_to_train == 'Empathy'
  end

  def is_sigil_walk?
    @skill_to_train == 'Scholarship'
  end

  def get_next_lunar_perceive_index
    @lunar_perceive_index = (@lunar_perceive_index + 1) % LUNAR_PERCEIVE_COMMANDS.length
  end

  def get_perceive_command
    if is_health_walk?
      "perceive health"
    elsif is_sigil_walk?
      "perceive sigil"
    elsif is_lunar_mage?
      "perceive #{LUNAR_PERCEIVE_COMMANDS[get_next_lunar_perceive_index]}"
    else
      "perceive"
    end
  end

  def get_rooms
    rooms = []
    if is_health_walk?
      rooms = @perceive_health_rooms
      if rooms.nil? || rooms.empty?
        rooms = get_data('town')[@hometown]['perceive_health_rooms']
      end
      if rooms.nil? || rooms.empty?
        DRC.message("No room ids defined for 'perceive_health_rooms' in your yaml nor in base-town.yaml for #{@hometown}.")
        exit
      end
    elsif is_sigil_walk?
      rooms = @sigil_walk_rooms
      if rooms.nil? || rooms.empty?
        rooms = get_data('town')[@hometown]['sigil_walk_rooms']
      end
    elsif @stationary_skills_only || is_lunar_mage?
        rooms = [Room.current.id]  
    end

    # fall back to attunement rooms if still nothing set
    if rooms.nil? || rooms.empty?
      rooms = @attunement_rooms
      if rooms.nil? || rooms.empty?
        rooms = get_data('town')[@hometown]['attunement_rooms']
      end
      if rooms.nil? || rooms.empty?
        DRC.message("No room ids defined for 'attunement_rooms' in your yaml nor in base-town.yaml for #{@hometown}.")
        exit
      end
    end
    rooms
  end

  def done_training?
    DRSkill.getxp(@skill_to_train) >= @exp_stop_mindstate
  end

  def train_skill(settings)
    room_list = get_rooms
    until done_training?
      # If we keep looping, ensure buffs stay active
      DRCA.do_buffs(settings, 'attunement')
      room_list.each do |room_id|
        train_skill_in_room(room_id)
        break if done_training?
      end
    end
  end

  def train_skill_in_room(room_id)
    DRCT.walk_to(room_id)
    # When health walking, you may fail to perceive your first time.
    # Either from lack of skill or waiting on the timer between perceive health attempts.
    # When health walking, will retry a few times before moving on.
    # When power walking, will be successful first try and move on like normal.
    5.times do
      break if perceived?
      # There is a 60 second timer between successful 'perceive health' commands.
      # So if doing a health walk then pause a little bit between retries to avoid
      # spamming the room (and yourself) with failed attempts. For normal attunement
      # training then the wait is only as long as the perceive command takes.
      pause (is_health_walk? ? 10 : 0)
      waitrt?
    end
    waitrt?
  end

  def perceived?
    if is_sigil_walk?
      while /Roundtime/ =~ bput(get_perceive_command, SECONDARY_SIGILS_PATTERN,'Having recently been searched, this area contains no traces of sigils',"Roundtime",)
        waitrt?
      end
      return true
    end
    case bput(get_perceive_command, "You fail to sense", "You're not ready to do that again, yet", "You reach out", "You sense:", "Roundtime")
    when "You reach out", "You sense:"
      true
    else
      false
    end
  end

end

Attunement.new
