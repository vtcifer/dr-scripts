=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#rezz
=end

custom_require.call(%w[common common-arcana events drinfomon spellmonitor])

class Rezz
  include DRC
  include DRCA

  def initialize
    unless DRStats.cleric?
      echo '*** Nice try, heathen! ***'
      exit
    end

    bput('rel rezz', 'The supernatural sight granted to you fades, returning your vision to normal') if DRSpells.active_spells['Resurrection']

    arg_definitions = [
      [
        { name: 'player', regex: /\w+/, optional: true, description: 'Name of the player to rezz' }
      ]
    ]

    args = parse_args(arg_definitions)
    @settings = get_settings
    @total_infused = 0

    @target = args.player ? DRRoom.pcs.find { |name| /^#{args.player}/i =~ name }.to_a : find_dead
    @target = nil if @target.empty?
    unless @target
      echo '*** No bodies! ***'
      exit
    end

    @rezz = if @settings.waggle_sets['rezz']['Resurrection']
              @settings.waggle_sets['rezz']['Resurrection']
            else
              echo "Using default values for REZZ, make a 'rezz'=>Resurrection waggle set to avoid this."
              get_data('spells').spell_data['Resurrection']
            end

    @rejuv = if @settings.waggle_sets['rezz']['Rejuvenation']
               @settings.waggle_sets['rezz']['Rejuvenation']
             else
               echo "Using default values for REJUV, make a 'rezz'=>Rejuvenation waggle set to avoid this."
               get_data('spells').spell_data['Rejuvenation']
             end

    Flags.add('no-favor', /has no favor with h.. god!/)
    Flags.add('rejuv-silver', 'A thin silver nimbus surrounds', 'As you concentrate, a thin silver nimbus flickers into view around', 'memories are protected from loss by the Resumption spell')
    Flags.add('dead', /H.. soul (is|is not) bound to h.. body./)
    Flags.add('decaying', 'will decay in less than a minute', 'will decay in about a minute', 'decay in a few minutes', 'decay in several minutes')
    Flags.add('necro', 'has no protection from the gods. judgment')

    @target.each do |name|
      @rejuv['cast'] = "cast #{name}"
      rejuv_process(name)
      echo("*** #{name} is already alive, dumbass! ***") unless Flags['dead']
      next unless Flags['dead']
      echo("*** #{name} is a necro! ***") if Flags['necro']
      next if Flags['necro']
      Flags['no-favor'] ? echo("*** #{name} has no favors! ***") : rezz_process(name)
    end
  end

  def find_dead
    /You take a moment to look for everybody in the area and see (.*)/ =~ bput('look people', "You look around and notice that you're the only one in the area", /You take a moment to look for everybody in the area and see (.*)/)
    Regexp.last_match(1).sub(/ and /, ', ').scan(/the body of (.+?(?=who))/i).flatten.map { |obj| obj.split.last }
  end

  def rejuv(player, quick = false)
    spell = quick ? { 'abbrev' => 'rejuv', 'prep_time' => 5, 'cast' => "cast #{player}", 'mana' => 10 } : @rejuv
    until Flags['rejuv-silver'] || Flags['necro']
      pause 5 while DRStats.mana < 30
      DRCA.cast_spell?(spell, @settings)
    end
  end

  def vigil(player)
    @vigil ||= { 'abbrev' => 'vigil', 'prep_time' => 10, 'cast' => "cast #{player}", 'mana' => 20 }
    vigil(player) unless DRCA.cast_spell?(@vigil, @settings)
  end

  def infuse_amount
    amt = if DRStats.mana < 20
            (@rezz['mana'] / 5)
          elsif DRStats.mana < 40
            (@rezz['mana'] / 4)
          elsif DRStats.mana < 61
            (@rezz['mana'] / 3)
          else
            @rezz['mana']
          end
    amt.zero? ? 1 : amt
  end

  def find_soul?(player)
    Flags.add('rotting', /#{player}.s body'?s? (grows paler|seems to|appears to|appearance takes)/)
    15.times do
      infuse_mana = infuse_amount
      pause 5 while DRStats.mana < 20
      @settings.osrel_no_harness ? nil : harness_mana([infuse_mana])
      match = bput("infuse rezz #{infuse_mana}", 'You sense a spirit nearby, but you are unable to make it out clearly', /spirit of #{player} in the Void/)
      @infuse_attempts += 1
      @total_infused += infuse_mana
      vigil(player) if Flags['rotting']
      return true if match.eql? "spirit of #{player} in the Void"
    end
    false
  end

  def keep_going?
    respond("*** Not found after #{@infuse_attempts} infuses so far. Do you want to continue? ***")
    respond('*** To continue: ;send yes ***')
    respond('*** To give up: ;send no ***')

    line = get until line.strip =~ /^(yes|no)$/i
    case line
    when /^yes$/i
      return true
    when /^no$/i
      respond('*** QUITTER!! ***')
      bput('rel rezz', 'The supernatural sight granted to you fades, returning your vision to normal')
      return false
    end
  end

  def rejuv_process(player)
    Flags.reset('no-favor')
    Flags.reset('rejuv-silver')
    Flags.reset('dead')
    Flags.reset('decaying')
    Flags.reset('necro')
    bput("perc #{player}", /#{player} has (.*) favors* with h.. god/, /has no favor with h.. god!/)
    vigil(player) if Flags['decaying']
    !Flags['rejuv-silver'] && Flags['dead'] ? rejuv(player) : nil
  end

  def rezz_process(player)
    DRCA.cast_spell?(@rezz, @settings) unless DRSpells.active_spells['Resurrection']
    while checkprep == 'Resurrection'
      pause 1
      bput('cast', get_data('spells').cast_messages)
    end
    pause 3

    until find_soul?(player)
      unless keep_going?
        bput("whisper #{player} I can't find your soul.  You need more favors!", 'You whisper', 'Who are you trying to whisper to?')
        return
      end
    end

    DRCA.cast_spell?({ 'abbrev' => 'sb', 'prep_time' => 2, 'cast' => "cast #{player}", 'mana' => 3 }, @settings)
    Flags.reset('rejuv-silver')
    rejuv(player, true)

    case bput("gesture #{player}", 'Roundtime', 'gift of life to a body that badly broken')
    when 'gift of life to a body that badly broken'
      fput("'#{player} still needs healing.")
      return
    end
    echo "*** It took #{@total_infused} infused mana to find #{player}'s soul. ***"
    pause 0.1 while DRSpells.active_spells['Resurrection']
  end
end

start_time = Time.now.to_f

before_dying do
  Flags.delete('no-favor')
  Flags.delete('rejuv-silver')
  Flags.delete('dead')
  Flags.delete('decaying')
  Flags.delete('necro')
  Flags.delete('rotting')
end

Rezz.new
echo "runtime: #{((Time.now.to_f - start_time) / 60.00).as_time}"
