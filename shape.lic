=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#shape
=end

custom_require.call(%w[common common-arcana common-crafting common-items])

class Shape
  include DRC
  include DRCC
  include DRCI
  include DRCA

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @stamp = @settings.mark_crafted_goods

    arg_definitions = [
      [
        { name: 'finish', options: %w[log stow trash], description: 'What to do with the finished item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'continue', regex: /continue/i, variable: true },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'laminate', regex: /laminate/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to laminate and increase durability.' }
      ],
      [
        { name: 'lighten', regex: /lighten/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to lighten.' }
      ],
      [
        { name: 'cable', regex: /cable/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to cable-back and increase draw-strength.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @finish = args.finish
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @noun = args.noun
    @training_spells = @settings.crafting_training_spells

    wait_for_script_to_complete('buff', ['shape'])
    Flags.add('shaping-assembly', 'You need another bone, wood or horn (backing) material', 'another finished bow (string)', 'another finished (long|short) wooden (pole)', 'another .* (leather (?:strip|cord))', 'You must assemble the (backer)', 'You must assemble the (strips)', 'another arrow (flights)', 'another .* (arrowhead)')
    if args.continue
      shape("analyze my #{@noun}")
    elsif args.laminate
      laminate
    elsif args.lighten
      lighten
    elsif args.cable
      cable_back
    else
      shape_item
    end
  end

  def check_hand
    unless left_hand =~ /#{@noun}/i || right_hand =~ /#{@noun}/i || left_hand =~ /lumber/ || right_hand =~ /lumber/ || left_hand =~ /shafts/ || right_hand =~ /shafts/
      echo('***Please hold the item or material you wish to work on.***')
      magic_cleanup
      exit
    end
    bput('swap', 'You move', 'You have nothing') unless left_hand =~ /#{@noun}/i || left_hand =~ /lumber/ || left_hand =~ /shafts/
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      stow_item('book')
      magic_cleanup
      exit
    end
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def laminate
    check_hand
    get_item('shaping book')
    turn_to("page #{find_recipe('6', 'bow lamination')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('clamps')
    shape("push my #{@noun} with my clamp")
  end

  def lighten
    check_hand
    get_item('shaping book')
    turn_to("page #{find_recipe('6', 'bow lightening')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('clamps')
    shape("push my #{@noun} with my clamp")
  end

  def cable_back
    check_hand
    get_item('shaping book')
    turn_to("page #{find_recipe('6', 'bow cable-backing')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('clamps')
    shape("push my #{@noun} with my clamp")
  end

  def shape_item
    crafting_magic_routine(@settings)
    get_item('shaping book')
    echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Engineering') == 175
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime', 'Arrow shaft')
    stow_item('book')
    get_item('drawknife')
    if @material == 'shafts'
      get_item("arrow #{@material}")
      stow_item('drawknife')
      get_item('shaper')
      shape('shape my shafts with my shaper')
    else
      get_item("#{@material} lumber")
      shape('scrape my lumber with my drawknife')
    end
  end

  def assemble_part
    return unless Flags['shaping-assembly']

    tool = right_hand
    stow_item(tool)
    part = Flags['shaping-assembly'].to_a[1..-1].join('.')
    part = 'backer' if part == 'backing'
    part = 'arrow flights' if part == 'flights'
    if part == "arrowhead"
      /the (.*) arrows/ =~ DRC.bput("analyze my #{@noun}", 'the (.*) arrows')
      arrow = Regexp.last_match(1)
      arrow_head = [ "cougar-claw", "boar-tusk", "sabretooth", "angiswaerd", "hele'la", "basilisk", "elsralael", "soot-streaked", "ice-adder", "jagged-horn", "drake-fang" ]
      part = arrow_head.find { |a| a.include?("#{arrow}")  } + (" arrowhead")
    end
    Flags.reset('shaping-assembly')
    get_item(part)
    bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    if ['long.pole', 'short.pole'].include?(part)
      3.times do
        get_item(part)
        bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
      end
    end
    stow_item(part)
    get_item(tool)
  end

  def shape(command)
    waitrt?
    crafting_magic_routine(@settings)
    check_hand
    assemble_part
    case bput(command,
              'a wood shaper is needed', 'with a wood shaper', 'You whittle away', 'Using abrupt motions you shape', 'You flip some', 'You apply some glue', 'Using slow strokes you scrape', 'You dab the surface', 'You lap the',
              'carved with a carving knife', 'further carving with a knife', 'continued knife carving', 'require carving with a knife', 'trimmed with a carving knife', 'carved with a knife',
              'rubbed out with a rasp', 'A cluster of small knots',
              'Applying the final touches', 'lamination process', 'lightening process', 'cable-backing process', 'These appear to be a type',
              'That tool does not seem suitable for that task.', 'You cannot figure out', 'doesn\'t appear suitable for working',
              'while it is inside of something',
              'Glue should now be applied', 'glue to fasten it', 'glue applied', 'You brush some glue on your', 'You apply a layer',
              'ready to be clamped', 'with clamps',
              'Some wood stain', 'application of stain',
              'You fumble around but',
              'ASSEMBLE Ingredient1')
    when 'a wood shaper is needed', 'with a wood shaper', 'You whittle away', 'Using abrupt motions you shape', 'You flip some', 'You apply some glue', 'Using slow strokes you scrape', 'You dab the surface', 'You lap the'
      waitrt?
      stow_item(right_hand)
      get_item('shaper')
      command = "shape my #{@noun} with my shaper"
    when 'carved with a carving knife', 'further carving with a knife', 'continued knife carving', 'require carving with a knife', 'trimmed with a carving knife', 'carved with a knife'
      waitrt?
      stow_item(right_hand)
      get_item('carving knife')
      command = "carve my #{@noun} with my knife"
    when 'rubbed out with a rasp', 'A cluster of small knots'
      waitrt?
      stow_item(right_hand)
      get_item('rasp')
      command = "scrape my #{@noun} with my rasp"
    when 'ready to be clamped', 'with clamps'
      waitrt?
      stow_item(right_hand)
      get_item('clamp')
      command = "push my #{@noun} with my clamp"
    when 'Glue should now be applied', 'glue to fasten it', 'glue applied'
      waitrt?
      stow_item(right_hand)
      get_item('glue')
      command = "apply my glue to my #{@noun}"
    when 'Some wood stain', 'application of stain'
      waitrt?
      stow_item(right_hand)
      get_item('stain')
      command = "apply my stain to my #{@noun}"
    when 'Applying the final touches', 'lamination process', 'lightening process', 'cable-backing process', 'These appear to be a type'
      stow_item(right_hand)
      finish
    when 'while it is inside of something', 'You fumble around but'
      echo '*** ERROR TRYING TO CRAFT, EXITING ***'
      stow_item(right_hand)
      exit
    when 'That tool does not seem suitable for that task.', 'You cannot figure out', 'doesn\'t appear suitable for working'
      shape("analyze my #{@noun}")
    end
    crafting_magic_routine(@settings)
    shape(command)
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
    bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def finish
    stamp
    case @finish
    when /log/
      logbook_item('engineering', @noun, @bag)
    when /stow/
      stow_item(@noun)
    when /trash/
      dispose_trash(@noun)
    end
    magic_cleanup
    exit
  end

  def stamp
    return unless @stamp
    get_item('stamp')
    bput("mark my #{@noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
    pause
    waitrt?
    stow_item('stamp')
  end
end

before_dying do
  Flags.delete('shaping-assembly')
end

Shape.new
