=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#tip
=end

custom_require.call %w[common common-money]

class Tip

  # include DRC for the bput function
  # include DRCM for various money handling functions
  
  def initialize
    arg_definitions = [
      # Two required arguments - recipient and amount; One optional argument, currency
      # Mirrors DR's mechanics of "tip <person> 10000 kron", and also allows "tip <person> 10000" and assumes coppers
      [
        { name: 'recipient', regex: /^[A-z\.\s\-']+$/i, variable: true, description: 'The recipent of your tip. Abbreviations ok.' },
        { name: 'amount', regex: /^\d+$/i, variable: true, description: 'Numeric amount to tip, no commas (e.g. the number "100" in 100 kronars)' },
        { name: 'currency', regex: Regexp.union($CURRENCY_REGEX_MAP.values), optional: true, variable: true, description: 'Optional currency. Abbreviations ok: kron, lirums, dokor' }         
      ],
      # Three required arguments - recipient, amount, denomination - plus a fourth optional argument - currency
      # Allows mechanic of "tip person 10 plat" and chooses your current max on hand
      # or "tip person 10 plat kron"
      [
        { name: 'recipient', regex: /^[A-z\.\s\-']+$/i, variable: true, description: 'The recipent of your tip. Abbreviations ok.' },
        { name: 'amount', regex: /^\d+$/i, variable: true, description: 'Numeric amount to tip, no commas (e.g. the number "100" in 100 kronars)' },
        { name: 'denomination', regex: Regexp.union($DENOMINATION_REGEX_MAP.values), variable: true, description: 'The denomination. Abbrevations ok. (e.g. plat, gold, silv)' },
        { name: 'currency', regex: Regexp.union($CURRENCY_REGEX_MAP.values), optional: true, variable: true, description: 'Optional currency. Abbreviations ok: kron, lirums, dokor' }
      ]
    ]
    
    args = parse_args(arg_definitions)  
    gratuity(args.recipient, args.amount, args.denomination, args.currency)

  end

  @tip_success_patterns = [
    /^You offer/i
  ]

  @tip_failure_patterns = [
    /^I don't know who/i,
    /you really should keep every bronze/i,
    /^You already have a tip offer outstanding/i,
    /^But you don't have that much/i,
    /^Hmmm, tipping yourself/i    
  ]

  def gratuity(recipient, amount, denomination, currency)    
    # Grab the total amount in copper given a numerical amount
    # and a denomination (e.g. 100 bronze). Utilize the
    # helper method in common-money. If no denomination given,
    # set to copper.
    denomination ||= 'copper'
    total = DRCM.convert_to_copper(amount, denomination)

    # Handle the currency, either parsing an abbreviated
    # currency to return the full canonical currency
    # or, if no currency specified, checking current 
    # wealth and using the max on hand.
    currency = handle_currency(currency)
    
    DRC.bput("tip #{recipient} #{total} #{currency}", @tip_success_patterns, @tip_failure_patterns)    
  end

  def handle_currency(currency)
    # If user hasn't specified the currency, choose based
    # on max currency on hand, else parse specified currency
    # in case user has abbreviated it.
    unless currency
      # If no currency is specified, this utilizes a  
      # DRCM helper method that gets a hash of your total 
      # wealth by currency, then finds the max currency and 
      # returns the key.
      currency = DRCM.get_total_wealth.max_by{|k,v| v}[0]
    else
      # Else when a currency is specified, parse the input
      # in case the user has abbreviated the currency.
      currency = DRCM.get_canonical_currency(currency)
    end
    
    return currency
  end

end

Tip.new