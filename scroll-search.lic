=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#scroll-search
=end

custom_require.call(%w[common common-items drinfomon])

class ScrollSearch
  include DRC
  include DRCI

  def initialize
    # Variables
    @scroll_nouns = get_data('items').scroll_nouns
    settings = get_settings
    @scroll_nouns += settings.custom_scrolls if settings.custom_scrolls
    @global_scroll_index = UserVars.scroll_counter || 0
    @owned_scrolls = UserVars.owned_scrolls || {}
    @scroll_search_debug = UserVars.scroll_search_debug
    @scroll_count = 0
    @container = ''

    arg_definitions =
      [
        [
          { name: 'search', regex: /search/i, description: 'Searches given container and labels any unlabeled scrolls.' },
          { name: 'container', regex: /\w+/i, description: 'The container to search.' }
        ],
        [
          { name: 'list', regex: /list/i, description: 'Lists all of the scrolls that have been categorized after a SEARCH.' }
        ],
        [
          { name: 'reset', regex: /reset/i, description: 'Clear stored scroll list' }
        ]
      ]

    args = parse_args(arg_definitions)

    if args.reset
      UserVars.scroll_counter = 0
      UserVars.owned_scrolls = {}
      return
    end

    search_container(args.container) if args.search

    return unless args.list

    if @owned_scrolls.length <= 0
      echo_message('NO SCROLLS HAVE BEEN ADDED! SEARCH YOUR CONTAINERS FIRST!')
      return
    end

    echo("Total scroll count is: #{@owned_scrolls.length}") if @scroll_search_debug
    display_scrolls
  end

  def search_container(container)
    # Empty your hands
    stow_hands

    @container = container

    # iterate over all scroll types
    echo("Scroll type count is: #{@scroll_nouns.length}.") if @scroll_search_debug

    # Clear current scroll listing from owned scrolls if
    # user is searching an existing container
    if @owned_scrolls[@container]
      echo("Clearing scroll array for this container, since it was previously searched --- #{@container}!") if @scroll_search_debug
      @owned_scrolls[@container] = []
    end

    # reset scroll count
    @scroll_count = 0

    @too_many = []
    @scroll_nouns.each do |scroll|
      echo "Searching for scrolls of type #{scroll}." if @scroll_search_debug
      look_scrolls(scroll)
    end

    echo("possibly more than #{$ORDINALS.count} scrolls: #{@too_many.join(', ')}") unless @too_many.count == 0

    # Save scrolls to user variables.
    if UserVars.owned_scrolls.nil? && @owned_scrolls.nil?
      echo('Creating an empty hash for vars!') if @scroll_search_debug
      UserVars.owned_scrolls = {}
      return
    end

    UserVars.owned_scrolls = @owned_scrolls
    UserVars.scroll_counter = @global_scroll_index

    echo "Total scrolls added: #{@owned_scrolls.length}!" if @scroll_search_debug

    # Empty your hands
    stow_hands

    echo_message('SEARCH COMPLETED')
  end

  def display_scrolls
    current_scrolls = UserVars.owned_scrolls

    if current_scrolls.length <= 0 || current_scrolls.nil?
      echo_message('NO SCROLLS TO DISPLAY -- SEARCH FIRST!')
      return
    end

    # Formatted Scroll listing
    respond("|#{' Scroll List '.center(83, '=')}|")
    respond("|#{'#'.center(5)}|#{'Scroll Name'.center(30)}|#{'Container'.center(15)}|#{'Type'.center(30)}|")
    respond("|#{''.center(83, '=')}|")

    # Iterate over scrolls to display
    current_scrolls.each_value do |scroll_array|
      scroll_array.sort_by { |x| x[:spell] }.each do |scroll_info|
        echo_scroll_list_line(scroll_info[:index], scroll_info[:spell], scroll_info[:container], scroll_info[:type])
      end
    end

    respond("|#{''.center(83, ' ')}|")
    respond("|#{'(;send <get #> or ;send <transfer # to <container>>)'.center(83, ' ')}|")
    respond("|#{''.center(83, '=')}|")

    line = get until line.strip =~ /^get\s+(\d+)$|^tran.+\s+(\d+)\s+to\s+(\w+)$/i

    case line
    when /^get\s+(\d+)$/i
      scroll_index = Regexp.last_match(1)
      echo("Scroll index is #{scroll_index}.") if @scroll_search_debug

      grab_scroll(scroll_index)
    when /^tran.+\s+(\d+)\s+to\s+(\w+)$/i
      scroll_index = Regexp.last_match(1)
      transfer_container = Regexp.last_match(2)

      echo("Index is #{scroll_index}. Transfer is: #{transfer_container}") if @scroll_search_debug

      transfer_scroll(scroll_index, transfer_container)
    end
  end

  # Private methods
  private

  def look_scrolls(scroll_type)
    (0..$ORDINALS.count).each do |index|
      ordinal = $ORDINALS[index]

      case bput("look #{ordinal} #{scroll_type} in my #{@container}", 'It is labeled ".*\."', '.* of the \w*\s*\w* spell.', 'three-dimensional shapes cover much of the', 'You see nothing unusual.', 'I could not find what you were referring to')
      when /could not find/
        return
      when 'three-dimensional shapes cover much of the'
        read_scroll(scroll_type, ordinal)
      when /It is labeled "(.*)\."/i
        spell_name = Regexp.last_match(1).empty? ? 'Undefined' : Regexp.last_match(1)
        echo "Spell is #{spell_name}" if @scroll_search_debug

        # If we cannot match, move on to the next scroll
        next if spell_name =~ /Undefined/i

        new_scroll =
          {
            container: @container,
            index: @global_scroll_index,
            container_index: index,
            ordinal: ordinal,
            spell: spell_name,
            type: scroll_type
          }

        # Get list of scrolls for this container
        scroll_array = []

        if @owned_scrolls.key? @container
          scroll_array = @owned_scrolls[@container]

          scroll_array.push(new_scroll)
          echo("1. Scroll size is #{scroll_array.length}") if @scroll_search_debug
        else
          scroll_array.push(new_scroll)
          echo("2. Scroll size is #{scroll_array.length}") if @scroll_search_debug
        end

        echo("Adding scroll array of size #{scroll_array.length} to hash.") if @scroll_search_debug
        @owned_scrolls[@container] = scroll_array
      end

      @scroll_count += 1
      @global_scroll_index += 1
    end
    @too_many << scroll_type
  end

  def read_scroll(scroll, ordinal)
    bput("get #{ordinal} #{scroll} from my #{@container}", 'You get')

    bput("read my #{scroll}", 'The .* contains a complete')

    bput("put my #{scroll} in my #{@container}", 'You put')
  end

  def transfer_scroll(index, container)
    # Retrieve scroll info
    scroll_info = get_scroll_info(index)

    echo("Got scroll info with spell: #{scroll_info[:spell]}") if @scroll_search_debug

    # Get previous values
    cur_scroll_container = get_noun(scroll_info[:container])
    cur_scroll_ordinal = scroll_info[:ordinal]
    cur_scroll_type = scroll_info[:type]

    # Make sure containers are opened
    bput("open my #{container}", 'That is already open', 'You open', 'You can\'t open that')
    bput("open my #{cur_scroll_container}", 'That is already open', 'You open')

    bput("get #{cur_scroll_ordinal} #{cur_scroll_type} from my #{cur_scroll_container}", 'You get')

    # Reorder the origin container
    reorder_container(scroll_info[:container], scroll_info, true)
    resave_container(scroll_info[:container], scroll_info, true)

    container_noun = container
    container = full_name(container)

    # Just warn the user if we cannot get
    # the full name of the container for some reason.
    if container =~ /Undefined/i && @scroll_search_debug
      echo('Was unable to retrieve the full name of this container...')
    end

    # Reorder destination container
    reorder_container(container, scroll_info, false)

    bput("put my #{cur_scroll_type} in my #{container_noun}", 'You put')

    # Transferred scrolls will always have a "first" ordinal
    scroll_info[:ordinal] = $ORDINALS[0]
    scroll_info[:container_index] = 0

    # Edit scroll information
    scroll_info[:container] = container

    # Resave scroll info
    resave_container(container, scroll_info, false)

    echo_message('SCROLL WAS TRANSFERRED!')
  end

  def reorder_container(container, scroll_info, was_removed)
    parameter = "C #{scroll_info[:type]}"
    scrolls = rummage(parameter, get_noun(container))

    echo("Scroll count of those matching the type (#{scroll_info[:type]}) is: #{scrolls.length}.") if @scroll_search_debug

    scrolls_in_container = @owned_scrolls[container]
    scrolls_in_container
      .select { |scroll_information| scroll_information[:type] == scroll_info[:type] }
      .reject { |scroll_information| scroll_information[:index] == scroll_info[:index] }
      .each do |scroll_information|
      new_index = if was_removed
                    if scroll_information[:container_index] > scroll_info[:container_index] && scroll_information[:container_index] > 0
                      scroll_information[:container_index] - 1
                    else
                      scroll_information[:container_index]
                    end
                  else
                    scroll_information[:container_index] + 1
                  end
      new_ordinal = $ORDINALS[new_index]

      echo("New ordinal and index for scroll (#{scroll_information[:spell]}) is: #{new_index} - #{new_ordinal}.") if @scroll_search_debug

      scroll_information[:ordinal] = new_ordinal
      scroll_information[:container_index] = new_index
    end
  end

  def resave_container(container, scroll_info, remove)
    # if was_removed is true, we remove the scroll from
    # the container. If not, we simply add it to the container specified.

    if remove
      scrolls_in_container = @owned_scrolls[scroll_info[:container]]
      removed = scrolls_in_container.delete(scroll_info)
      if removed
        echo("Deleting scroll #{removed[:spell]} from container #{scroll_info[:container]}") if @scroll_search_debug
        # Re-save owned scrolls listing
        @owned_scrolls[scroll_info[:container]] = scrolls_in_container

        # Re-save user variables
        UserVars.owned_scrolls = @owned_scrolls
      else
        echo_message('COULD NOT TRANSFER SCROLL TO NEW CONTAINER')
        exit
      end
    else
      echo "Attempting to add scroll #{scroll_info[:spell]} to container #{container}." if @scroll_search_debug

      my_scroll_list = []

      my_scroll_list = @owned_scrolls[container] if @owned_scrolls.key? container

      my_scroll_list.push(scroll_info)
      if my_scroll_list.empty?
        echo_message('COULD NOT ADD SCROLL TO CONTAINER')
        exit
      else
        echo("Adding scroll #{scroll_info[:spell]} to container #{container}. Length of array is #{my_scroll_list.length}") if @scroll_search_debug
        # Re-save owned scrolls listing
        @owned_scrolls[container] = my_scroll_list

        # Re-save user variables
        UserVars.owned_scrolls = @owned_scrolls

        # List scrolls
        my_scroll_list.each do |scroll_array|
          echo("Scrolls in container is #{scroll_array[:spell]}") if @scroll_search_debug
        end

        # List everything
        @owned_scrolls.each do |c, scroll_array|
          scroll_array.each do |scroll_information|
            echo("Container #{c} | #{scroll_information[:spell]}") if @scroll_search_debug
          end
        end
      end
    end
  end

  def grab_scroll(index)
    echo "Index in grab scroll of scroll is: #{index}." if @scroll_search_debug

    # Retrieve scroll info
    scroll_info = get_scroll_info(index)
    echo("Got scroll info with spell: #{scroll_info[:spell]}") if @scroll_search_debug

    # Get previous values
    cur_scroll_container = get_noun(scroll_info[:container])
    cur_scroll_ordinal = scroll_info[:ordinal]
    cur_scroll_type = scroll_info[:type]

    bput("open my #{cur_scroll_container}", 'That is already open', 'You open')
    bput("get #{cur_scroll_ordinal} #{cur_scroll_type} from my #{cur_scroll_container}", 'You get')

    # Reorder container
    reorder_container(scroll_info[:container], scroll_info, true)

    # Remove this scroll from our hash map
    scrolls_in_container = @owned_scrolls[scroll_info[:container]]

    echo("Scrolls in container count is: #{scrolls_in_container.length}") if @scroll_search_debug

    scrolls_in_container
      .select { |s| s[:index] == index.to_i }
      .each { |s| scrolls_in_container.delete(s) }

    # Re-save owned scrolls listing
    @owned_scrolls[scroll_info[:container]] = scrolls_in_container

    # Re-save user variables
    UserVars.owned_scrolls = @owned_scrolls

    echo_message('SCROLL WAS GRABBED!')
  end

  def get_scroll_info(index)
    # Retrieve scroll info
    current_scrolls = UserVars.owned_scrolls

    the_scroll = nil

    current_scrolls.each_value do |scroll_array|
      the_scroll = scroll_array.find { |scroll_info| scroll_info[:index] == index.to_i }

      unless the_scroll.nil?
        echo "Found scroll info : #{the_scroll[:spell]}" if @scroll_search_debug
        break
      end
    end

    echo("The scroll is: #{the_scroll[:spell]}") # if @scroll_search_debug

    unless the_scroll
      echo_message('INVALID SCROLL NUMBER')
      exit
    end

    the_scroll
  end

  def echo_scroll_list_line(index, name, container, type)
    respond("|#{index.to_s.center(5)}|#{name.center(30)}|#{container.center(15)}|#{type.center(30)}|")
  end

  def format_bar(padding, value)
    format("%#{padding}s", value)
  end

  def echo_message(msg)
    echo("*** #{msg} ***")
  end
end

# Call this last to avoid the need for forward declarations
ScrollSearch.new
